Харківський університет радіоелектроніки Факультет комп'ютерних наук Кафедра програмної інженерії





ЗВІТ
до практичної роботи з дисципліни "Архітектура програмного забезпечення"
на тему: "Патерни проєктування"








  Виконав ст. гр ПЗПІ-22-4 Герцев В’ячеслав Андрійович

Перевірив
ст. викл кафедри ПІ Сокорчук Ігор Петрович





Харків 2025

Історія змін
№ДатаВерсія звітуОпис змін та виправлень108.05.20251Створено початкову версію звіту

Завдання
Метою роботи є вивчення шаблону проєктування Builder, аналіз його принципів роботи та реалізації в мовах програмування, таких як C++. Завданням було підготувати відеодоповідь на тему «Шаблон (патерн) проєктування ПЗ — Builder», а також створити презентацію та приклади програмного коду.


Опис виконаної роботи
У процесі виконання роботи було досліджено принципи роботи шаблону Builder, його складові та практичне застосування у програмуванні. Було розроблено приклад програмного коду для демонстрації шаблону на мові C++. Також була підготовлена презентація, що висвітлює основні аспекти шаблону та його використання у програмуванні.


Висновки
Шаблон Builder дозволяє ефективно будувати складні об'єкти з численними параметрами, надаючи можливість розділити побудову об'єкта та його представлення. Цей шаблон застосовний у великих проєктах, де необхідно мати гнучкість у створенні об'єктів. Використання шаблону спрощує код, дозволяючи зберігати чистоту та зрозумілість архітектури програмного забезпечення.
.
Додаток А
Посилання на відеозапис - https://youtu.be/uQbGkSbrMj0 

00:00 Вступ. Представлення теми доповіді
00:27 Актуальність використання шаблонів проєктування у ПЗ
00:37 Класифікація шаблонів проєктування. Три основні групи
01:09 Вступ до шаблону Builder. Призначення та основна ідея
01:53 UML-структура шаблону Builder. Опис основних учасників
02:45 Приклад застосування патерна для побудови ПК
03:00 Демонстрація прикладу коду шаблону Builder на C++
03:44 Порівняння Builder з іншими створювальними шаблонами
04:00 Аналіз переваг та недоліків Builder
04:20 Сфери практичного застосування шаблону Builder
04:40 Висновки та завершення доповіді


Додаток Б


Рис. 1 – Головна сторінка


Рис. 2 – Мета доповіді


Рис. 3 – Шаблони проектування



Рис. 4 – Ідея паттерну




Рис. 5 – Структура паттерну та діаграма



	Рис. 6 – Приклад застосування




Рис. 7 – Приклад коду





Рис. 8 – Порівняння Builder з іншими шаблонами




Рис. 9 – Переваги та недоліки паттерну




Рис. 10 – Приклади застосування патерна


Рис. 11 – Висновки по доповіді



Рис. 12 – Список використаних джерел


Додаток В

1. class Computer {
2. public:    
3. void setCPU(const std::string& cpu) { this->cpu = cpu; }
4. void setRAM(const std::string& ram) { this->ram = ram; }
5. void setStorage(const std::string& storage) { this->storage = storage; }
6. void specs() const {
7. std::cout << "CPU: " << cpu << ", RAM: " << ram << ", Storage: " << storage << std::endl;    }
8. private:    
9. std::string cpu, ram, storage;
10. };
11. class Builder {
12. public:
13. virtual void buildCPU() = 0;
14. virtual void buildRAM() = 0;
15. virtual void buildStorage() = 0;
16. virtual Computer getResult() = 0;
17. };
18. class GamingPCBuilder : public Builder {
19. private:
20. Computer pc;
21. public:
22. void buildCPU() override { pc.setCPU("Intel i9"); }
23. void buildRAM() override { pc.setRAM("32GB"); }
24. void buildStorage() override { pc.setStorage("1TB SSD"); }
25. Computer getResult() override { return pc; }
26. };
27. class Director {
28. public:
29. void construct(Builder& builder) {
30. builder.buildCPU();
31. builder.buildRAM();
32. builder.buildStorage();
33. }
34. };
35. GamingPCBuilder builder;
36. Director director;
37. director.construct(builder);
38. Computer pc = builder.getResult();
39. pc.specs();



